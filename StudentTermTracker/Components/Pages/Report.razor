@page "/report/{TermId:int}"
@using StudentTermTracker.Models
@using StudentTermTracker.Services
@inject NavigationManager NavigationManager

<PageTitle>Assessment Report</PageTitle>

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col">
            <h2>@_termName Assessment Report</h2>
            <p class="text-muted">Generated on @DateTime.Now.ToString("MMMM dd, yyyy HH:mm")</p>
        </div>
    </div>

    @if (_loading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (_assessments == null || !_assessments.Any())
    {
        <div class="alert alert-info">
            No assessments found for this term.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Course Name</th>
                        <th>Assessment Name</th>
                        <th>Assessment Type</th>
                        <th>Start Date</th>
                        <th>End Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var assessment in _assessments)
                    {
                        <tr>
                            <td>@assessment.CourseName</td>
                            <td>@assessment.AssessmentName</td>
                            <td>@assessment.AssessmentType</td>
                            <td>@assessment.StartDate.ToString("MM/dd/yyyy")</td>
                            <td>@assessment.EndDate.ToString("MM/dd/yyyy")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <div class="row mt-4">
        <div class="col">
            <button class="btn btn-secondary" @onclick="GoBack">Back</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int TermId { get; set; }

    private string _termName = "";
    private List<AssessmentReportItem> _assessments;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Term term = await DatabaseService.GetTermByIdAsync(TermId);
            if (term != null)
            {
                _termName = term.Name;
                _assessments = (await DatabaseService.GetAssessmentsForReportAsync(TermId)).ToList();
            }
        }
        catch (Exception ex)
        {
            // Handle error appropriately
            Console.WriteLine($"Error loading report data: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/terms");
    }
} 