@page "/term/edit/{TermId:int}"
@using StudentTermTracker.Services
@using StudentTermTracker.Models
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<div class="page-container">
    <div class="toolbar">
        <button class="toolbar-item" @onclick="SaveTerm_Clicked">Save</button>
        <button class="toolbar-item" @onclick="CancelTerm_Clicked">Cancel</button>
        <button class="toolbar-item" @onclick="DeleteTerm_Clicked">Delete</button>
    </div>

    <div class="content-container">
        <div class="form-grid">
            <div class="form-row">
                <label class="form-label">ID</label>
                <input type="text" @bind="term.Id" readonly class="form-control" placeholder="TermID" />
            </div>

            <div class="form-row">
                <label class="form-label">Name</label>
                <input type="text" @bind="term.Name" class="form-control" placeholder="Enter Term Name" />
            </div>

            <div class="form-row">
                <label class="form-label">Start Date</label>
                <input type="date" @bind="term.StartDate" @bind:format="yyyy-MM-dd" class="form-control" />
            </div>

            <div class="form-row">
                <label class="form-label">End Date</label>
                <input type="date" @bind="term.EndDate" @bind:format="yyyy-MM-dd" class="form-control" />
            </div>
        </div>

        <button class="btn btn-primary mt-3" @onclick="AddCourse_Clicked">Add Course</button>

        <h4 class="mt-4">Course Count</h4>
        <p class="course-count">@courseCount</p>

        <h4 class="mt-3">Course List</h4>

        @if (courses == null || !courses.Any())
        {
            <p>No Courses Yet...</p>
        }
        else
        {
            <div class="collection-view">
                @foreach (var course in courses)
                {
                    <div class="course-item" @onclick="() => CourseCollectionView_SelectionChanged(course)">
                        <div class="course-grid">
                            <div class="course-row">
                                <div class="course-label">Name</div>
                                <div class="course-value">@course.Name</div>
                            </div>

                            <div class="course-row">
                                <div class="course-label">Start Date</div>
                                <div class="course-value">@course.StartDate.ToString("MM/dd/yyyy")</div>
                            </div>

                            <div class="course-row">
                                <div class="course-label">End Date</div>
                                <div class="course-value">@course.EndDate.ToString("MM/dd/yyyy")</div>
                            </div>

                            <div class="course-row">
                                <div class="course-label">Instructor Name</div>
                                <div class="course-value">@course.InstructorName</div>
                            </div>

                            <div class="course-row">
                                <div class="course-label">Instructor Phone</div>
                                <div class="course-value">@course.InstructorPhone</div>
                            </div>

                            <div class="course-row">
                                <div class="course-label">Instructor Email</div>
                                <div class="course-value">@course.InstructorEmail</div>
                            </div>

                            <div class="course-row">
                                <div class="course-label">Status</div>
                                <div class="course-value">@course.Status</div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int TermId { get; set; }

    private Term term = new Term();
    private IEnumerable<Course> courses;
    private int courseCount;

    protected override async Task OnInitializedAsync()
    {
        // Load term data
        term = await DatabaseService.GetTermByIdAsync(TermId);
        await LoadCourses();
    }

    private async Task LoadCourses()
    {
        courses = await DatabaseService.GetCoursesByTermIdAsync(TermId);
        courseCount = courses.Count();
    }

    private async Task SaveTerm_Clicked()
    {
        var today = DateTime.Today;

        if (string.IsNullOrWhiteSpace(term.Name))
        {
            await DialogService.DisplayAlert("Missing Term Name", "Please enter a name for the term.", "OK");
            return;
        }

        if (term.StartDate == today)
        {
            bool confirmStartTerm = await DialogService.DisplayAlert(
                "Confirm Start Date",
                "Are you sure you want to start the term today?",
                "Yes",
                "No"
            );

            if (!confirmStartTerm)
                return;
        }

        if (term.EndDate < term.StartDate.AddMonths(6) || term.EndDate > term.StartDate.AddMonths(6))
        {
            await DialogService.DisplayAlert(
                "Invalid term length",
                "The term must end 6 months after the Start Date",
                "OK"
            );
            return;
        }

        await DatabaseService.UpdateTerm(term);
        NavigationManager.NavigateTo("/terms");
    }

    private void CancelTerm_Clicked()
    {
        NavigationManager.NavigateTo("/terms");
    }

    private async Task DeleteTerm_Clicked()
    {
        bool confirmDelete = await DialogService.DisplayAlert(
            "Delete Term?",
            "Are you sure you want to delete this term and related courses?",
            "Yes",
            "No"
        );

        if (!confirmDelete)
        {
            return;
        }

        await DatabaseService.DeleteTerm(term.Id);
        await DialogService.DisplayAlert("Term Deleted", "Term Deleted Successfully", "OK");
        NavigationManager.NavigateTo("/terms");
    }

    private async Task AddCourse_Clicked()
    {
        var currentCourses = await DatabaseService.GetCoursesByTermIdAsync(TermId);
        int currentCourseCount = currentCourses.Count();

        if (currentCourseCount >= 6)
        {
            await DialogService.DisplayAlert(
                "Course Limit Reached",
                "You cannot add more than 6 courses to a term.",
                "OK"
            );
            return;
        }

        NavigationManager.NavigateTo($"/course/add/{TermId}");
    }

    private void CourseCollectionView_SelectionChanged(Course course)
    {
        NavigationManager.NavigateTo($"/course/edit/{course.Id}");
    }
}
